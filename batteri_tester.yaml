esphome:
  name: batteri_tester
  platform: ESP8266
  board: nodemcuv2
  on_boot:
    priority: -100
    then:
      lambda: !lambda |-
        id(run) = 0;
        id(runtime) = 0;

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: "2UR/j6p7918snDJgqSqxMhG4L9rIi/jybwHXJh/CxcE="

ota:
  password: "e8fcc33fe7c915f5973161bd77bbc38c"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Batteri-Tester Fallback Hotspot"
    password: "tester123"

captive_portal:

i2c:
  sda: GPIO4
  scl: GPIO5

display:
  - platform: lcd_pcf8574
    dimensions: 16x2
    id: disp
    address: 0x3F
    lambda: |-
      it.strftime(0, 1, "%Y-%m-%d %H:%M", id(timeing).now());
      it.printf("%.3f Volt", id(ADC).state);

web_server:
  port: 80

time:
    - platform: sntp
      id: timeing

globals:
   - id: loadResistance
     type: float
     restore_value: no
     initial_value: "2.5"

   - id: BatteryVolt
     type: float
     restore_value: no
     initial_value: "12.0"

   - id: BatteryAh
     type: float
     restore_value: no
     initial_value: "0.0"

   - id: runtime
     type: int
     restore_value: no
     initial_value: '0'

   - id: run
     type: bool
     initial_value: 'false'


switch:
  - platform: gpio
    name: "3A"
    id: A3
    pin:
      number: D5
      inverted: true
  - platform: gpio
    name: "6A"
    id: A6
    pin:
      number: D6
      inverted: true
    on_turn_on:
      then:
        - switch.turn_on: A3
    on_turn_off:
      then:
        - switch.turn_off: A3
  - platform: gpio
    name: "9A"
    id: A9
    pin:
      number: D7
      inverted: true
    on_turn_on:
      then:
        - switch.turn_on: A3
        - switch.turn_on: A6
    on_turn_off:
      then:
        - switch.turn_off: A3
        - switch.turn_off: A6

button:
  - platform: template
    name: "Start test"
    id: running
    on_press:
      - lambda: !lambda |-
          id(run) = true;
          id(runtime) = 0;
          id(AH) = 0;
      - switch.turn_on: A3
    
  - platform: template
    name: "Stop test"
    id: stop
    on_press:     
      - lambda: !lambda |-
          id(run) = false;
      - switch.turn_off: A3

sensor:
  - platform: adc
    pin: A0
    name: "Batteri volt"
    id: ADC
    accuracy_decimals: 3
    update_interval: 100ms
    filters:
      - median:
          window_size: 10
          send_every: 10
      - lambda: |-
              return (x * 3.3) / (3.3 / 18.796) - 0.2;

  - platform: template
    name: "Belastning A"
    id: BA
    accuracy_decimals: 2
    unit_of_measurement: "A"
    update_interval: 1000ms
    lambda: !lambda |-
      if ( (id(run) = true) ) {
        return (id(ADC).state / id(loadResistance));
      } else {
        return {};
      }

  - platform: template
    unit_of_measurement: "s"
    update_interval: 1000ms
    name: Runtime
    lambda: !lambda |-
      if ( (id(run) = true) ) {
        if ( (id(ADC).state > id(lowvolt).state) ) {
          return id(runtime) +=1;
        } else {
          return id(runtime);
          id(run) = false;
          id(A3).turn_off();
        }
      } else {
        return id(runtime);
      }

  - platform: template
    unit_of_measurement: "Ah"
    accuracy_decimals: 2
    update_interval: 1000ms
    id: AH
    name: Ah
    lambda: !lambda |-
      return (id(BA).state / 3600) * id(runtime);

  - platform: template
    name: va_run
    update_interval: 1000ms
    lambda: !lambda |-
      return (id(run));


number:
  - platform: template
    id: lowvolt
    name: "Test stop ved V"
    optimistic: true
    mode: box
    min_value: 10.5
    max_value: 15
    step: 0.1

text_sensor:
  - platform: template
    name: "Test tid"
    lambda: |-
          int dur = id(runtime);
          int dys = 0;
          int hrs = 0;
          int mnts = 0;
          if (dur > 86399) {
            dys = trunc(dur / 86400);
            dur = dur - (dys * 86400);
          }
          if (dur > 3599) {
            hrs = trunc(dur / 3600);
            dur = dur - (hrs * 3600);
          }
          if (dur > 59) {
            mnts = trunc(dur / 60);
            dur = dur - (mnts * 60);
          }
          char buffer[17];
          sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
          return {buffer};
    icon: mdi:clock-start
    update_interval: 1s